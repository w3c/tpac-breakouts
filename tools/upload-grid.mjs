#!/usr/bin/env node
import fs from 'fs';
import { getEnvKey } from './lib/envkeys.mjs';
import { fetchProject, saveSessionMeetings } from './lib/project.mjs'

function readconfig(filename) {
  if (filename) {
    let content = fs.readFileSync(filename).toString();
    // Don't want room names with </pre> in them!
    let regexp = /<pre id="data">(.*)<\/pre>/s;
    let data = content.match(regexp)[1];
    return(JSON.parse(data));
  }
}

async function main({ filename, apply }) {
  const PROJECT_OWNER = await getEnvKey('PROJECT_OWNER');
  const PROJECT_NUMBER = await getEnvKey('PROJECT_NUMBER');
  console.warn();
  console.warn(`Retrieve project ${PROJECT_OWNER}/${PROJECT_NUMBER}...`);
  const project = await fetchProject(PROJECT_OWNER, PROJECT_NUMBER);
  if (!project) {
    throw new Error(`Project ${PROJECT_OWNER}/${PROJECT_NUMBER} could not be retrieved`);
  }
  console.warn(`- found ${project.sessions.length} sessions`);
  console.warn(`Retrieve project ${PROJECT_OWNER}/${PROJECT_NUMBER} and session(s)... done`);

  console.warn(`Extract grid from HTML page...`);
  const configs = readconfig(filename);
  console.warn(`Extract grid from HTML page... done`);

  console.warn(`Assign sessions to meetings...`);
  const updated = [];
  for (const config of configs) {
    if (!project.sessions.find(s => s.number === config.number)) {
      throw new Error('Unknown session ' + config.number);
    }
    if (!project.days.find(s => s.name === config.day)) {
      throw new Error('Unknown day ' + config.slot + ' in ' + config.number);
    }
    if (!project.slots.find(s => s.name === config.slot)) {
      throw new Error('Unknown slot ' + config.slot + ' in ' + config.number);
    }
    if (!project.rooms.find(s => s.name === config.room)) {
      throw new Error('Unknown room ' + config.room + ' in ' + config.number);
    }
    const session = project.sessions.find(s => s.number === config.number);
    if (session.room !== config.room ||
        session.day !== config.day ||
        session.slot !== config.slot ||
        session.meeting !== config.meeting) {
      session.day = config.day;
      session.room = config.room;
      session.slot = config.slot;
      session.meeting = config.meeting;
      updated.push(session);
    }
  }

  if (apply) {
    for (const session of updated) {
      console.warn(`- updating #${session.number}...`);
      await saveSessionMeetings(session, project);
      console.warn(`- updating #${session.number}... done`);
    }
    console.warn(updated.length ?
      `- ${updated.length} sessions updated` :
      '- no session to update');
  }
  else {
    console.warn(updated.length ?
      `- ${updated.length} sessions would be updated: ${updated.map(s => s.number).join(', ')}` :
      '- no session would be updated');
  }
  console.warn(`Assign sessions to meetings... done`);
}


// filename is an HTML file generated by suggest-grid.mjs that
// contains the raw session data
let filename
if (!process.argv[2]) {
    console.warn('Missing first param: HTML file with grid and raw data');
    } else {
    filename  = process.argv[2];
   }

let apply;
if (process.argv[3]) {
    apply = process.argv[3];   
}

main({ filename, apply })
  .catch(err => {
    console.warn(`Something went wrong: ${err.message}`);
    throw err;
  });
