{
  "title": "Input for workers/worklets",
  "proposer": {
    "login": "nzolghadr",
    "name": "Navid Zolghadr",
    "email": "nzolghadr@chromium.org"
  },
  "summary": "A <a href='https://github.com/wicg/input-for-workers'>proposal</a> to allow dispatching of Input Events to Worker and Worklets. The goal is to unlock many more applications to leverage workers for performance isolation in particular latency sensitive applications such as drawing/inking, gaming and XR, interactive animations and audio.",
  "type": "open discussion",
  "goals": "Discuss use cases and implications, brainstorm the API",
  "others": ["majidvp"],
  "capacity": "medium",
  "track": "core",
  "report" :"<p>We presented our proposal (<a href='http://bit.ly/input-for-workers'>http://bit.ly/input-for-workers</a>) at TPAC plenary session. There were engineers from Microsoft (Daniel Libby, ...), Apple (Ryosuke Niwa, Wenson Hsieh), Mozilla (Olli Pettay, Marcus Stange), and Google (Navid Zolghadr, Majid Valipour, Mustaq Ahmed, Lan Wei, Yutaka Hirano) and others.</p><p>Here is a one paragraph summary of the presentation: The proposal was about exposing user input events (starting with pointer events, keyboard events, and gamepad) to the worker threads. With the proposed API the javascript could delegate events that are targeted to be sent to parts of the DOM to also be sent to a worker as well.</p><p>In general people understood the use cases and were supportive of the general idea. There were questions on hit-testing and concern about dealing with raciness when event is dispatched to both worker and main. There was some suggested alternatives that could help (e.g., adding additional information to the event to indicate the event was sent to another worker, or only send to one, or send to worker first with potentially sending to main afterwards).</p><p>yutakahirano@ (Google) suggested an alternative way of exposing events using the stream API which will be discussed on the WICG Github repo for the proposal.</p><p>rniwa@ (Apple) was supportive of moving more stuff to workers. He thought it was the right direction. Believed it is a good idea that we prototype the model and experiment with it. Specially to know if the impact of raciness. Also thought dispatch to either worker or main only may help simplify things.</p><p>mstange@ (Mozilla) was interested in the concept but mentioned that Gecko does not have lots of output in worker (no offscreen canvas or any worklets). He said this adds complexity in engine but something he would have wanted as web dev when implemented async scrolling. Discussed a concrete case of raciness involving Keyboard and mouse events. Consider a game is running in a worker and there is a side-chat that is on the main thread. Keyboard events go to worker (AWSD) except when user focused on chat text area. This can be racy switching focus in the middle.</p><p><a href='https://docs.google.com/document/d/1DQxad2ECXsHiOaVpEXaZDQ2Ld_5opmG-lzjTe0YhW2g/edit#'>https://docs.google.com/document/d/1DQxad2ECXsHiOaVpEXaZDQ2Ld_5opmG-lzjTe0YhW2g/edit#</a></p>"
}
